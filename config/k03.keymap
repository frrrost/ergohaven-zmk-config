#include "keys_ru.h"

#define ZMK_MOUSE_SCRL_VAL 140
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    behaviors {
        // Encoder #1 → Volume

        enc_vol: enc_vol {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENC_VOL";
            #sensor-binding-cells = <0>;
            bindings = <&kp C_VOL_UP>, <&kp C_VOL_DN>;
        };

        // Encoder #2 → Alt+Tab (default layer)

        enc_rotate_tab: enc_rotate_tab {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENC_ROTATE_TAB";
            #sensor-binding-cells = <0>;
            bindings = <&kp TAB>, <&kp LS(TAB)>;
        };

        // Encoder #2 → Vertical scroll (nav layer)

        enc_vscroll: enc_vscroll {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENC_VSCROLL";
            #sensor-binding-cells = <0>;
            tap-ms = <20>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;
        };

        // Encoder #3 → Horizontal scroll

        enc_hscroll: enc_hscroll {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENC_HSCROLL";
            #sensor-binding-cells = <0>;
            tap-ms = <20>;
            bindings = <&msc SCRL_LEFT>, <&msc SCRL_RIGHT>;
        };

        enc_no_behavior: enc_no_behavior {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENC_NO_BEHAVIOR";
            #sensor-binding-cells = <0>;
            bindings = <&none>, <&none>;
        };

        enc_cycle_tabs: enc_cycle_tabs {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENC_CYCLE_TABS";
            #sensor-binding-cells = <0>;
            bindings = <&kp RC(PAGE_DOWN)>, <&kp RC(PAGE_UP)>;
        };

        enc_prev_next: enc_prev_next {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENC_PREV_NEXT";
            #sensor-binding-cells = <0>;
            bindings = <&kp C_PREVIOUS>, <&kp C_NEXT>;
        };

        kbd_ctrl_on_hold: kbd_ctrl_on_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "KBD_CTRL_ON_HOLD";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <400>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <125>;
        };

        td_caps_lock: td_caps_lock {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_CAPS_LOCK";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPSLOCK>;
        };
    };

    macros {
        go_to_alt_tab: go_to_alt_tab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 4 &kt LEFT_ALT>;
            label = "GO_TO_ALT_TAB";
        };

        from_alt_tab: from_alt_tab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kt LEFT_ALT &to 0>;
            label = "FROM_ALT_TAB";
        };

        ctrl_once: ctrl_once { 
            compatible = "zmk,behavior-macro";
            #binding-cells = <1>;     // we’ll pass the key as a parameter
            bindings = <&kp LC($0)>;  // expands to Ctrl + whatever key we pass in
            label = "CTRL_ONCE";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&kp GRAVE      &kp N1                     &kp N2                     &kp N3                     &kp N4                     &kp N5                          &kp N6  &kp N7     &kp N8     &kp N9    &kp N0    &go_to_alt_tab
&kp ESC        &kp Q                      &kp W                      &kp E                      &kp R                      &kp T                           &kp Y   &kp U      &kp I      &kp O     &kp P     &kp BACKSPACE
&kp TAB        &kbd_ctrl_on_hold LC(A) A  &kbd_ctrl_on_hold LC(S) S  &kp D                      &kp F                      &kp G                           &kp H   &kp J      &kp K      &kp L     &kp SEMI  &kp SQT
&td_caps_lock  &kbd_ctrl_on_hold LC(Z) Z  &kbd_ctrl_on_hold LC(X) X  &kbd_ctrl_on_hold LC(C) C  &kbd_ctrl_on_hold LC(V) V  &kp B   &kp LBKT     &kp RBKT   &kp N   &kp M      &kp COMMA  &kp DOT   &kp FSLH  &kp LG(SPACE)
                                          &kp LG(SPACE)              &kp LALT                   &kp LCTRL                  &mo 1   &kp SPACE    &kp ENTER  &mo 2   &kp RCTRL  &kp RALT   &kp RGUI
            >;

            display-name = "Base";
            sensor-bindings =
                <&enc_no_behavior>,
                <&enc_no_behavior>,
                <&enc_vol>,
                <&enc_no_behavior>,
                <&enc_no_behavior>,
                <&enc_no_behavior>;

            //  unused
        };

        nav {
            bindings = <
&kp C_PLAY_PAUSE  &kp F2           &kp F3        &kp F4    &kp F5         &kp F6                                 &kp F7           &kp F8        &kp F9        &kp F10        &kp F11         &kp F12
&kp F1            &none            &kp HOME      &kp UP    &kp END        &kp INS                                &kp PG_UP        &kp HOME      &kp UP        &kp END        &none           &kp F12
&msc SCRL_LEFT    &msc SCRL_RIGHT  &kp LEFT      &kp DOWN  &kp RIGHT      &kp RET                                &kp PG_DN        &kp LEFT      &kp DOWN      &kp RIGHT      &msc SCRL_UP    &msc SCRL_DOWN
&trans            &none            &kp LC(LEFT)  &kp CAPS  &kp LC(RIGHT)  &kp DEL  &none     &kp K_CONTEXT_MENU  &kp PRINTSCREEN  &kp LC(LEFT)  &kp CAPSLOCK  &kp LC(RIGHT)  &msc SCRL_LEFT  &msc SCRL_RIGHT
                                   &trans        &trans    &trans         &trans   &trans    &trans              &mo 3            &trans        &kp DELETE    &kp ENTER
            >;

            display-name = "Navigation";
            sensor-bindings =
                <&enc_no_behavior>,
                <&enc_no_behavior>,
                <&enc_prev_next>,
                <&enc_cycle_tabs>,
                <&enc_no_behavior>,
                <&enc_no_behavior>;

            //  unused
        };

        sym {
            bindings = <
&kp C_MUTE  &none     &kp AT    &kp DLLR   &kp HASH  &kp DQT                          &none         &kp LPAR  &kp CARET  &kp RPAR  &none     &trans
&trans      &none     &kp LT    &kp EQUAL  &kp GT    &kp GRAVE                        &none         &kp LBKT  &kp UNDER  &kp RBKT  &none     &trans
&trans      &none     &kp LPAR  &kp MINUS  &kp RPAR  &kp PLUS                         &kp PRCNT     &kp LBRC  &kp SEMI   &kp RBRC  &kp EXCL  &trans
&trans      &kp BSLH  &kp STAR  &kp COLON  &kp FSLH  &none      &trans    &kp RU_DOT  &kp RU_COMMA  &kp PIPE  &kp TILDE  &kp AMPS  &none     &trans
                      &trans    &trans     &trans    &mo 3      &trans    &trans      &trans        &trans    &trans     &trans
            >;

            display-name = "Symbols";
            sensor-bindings =
                <&enc_no_behavior>,
                <&enc_no_behavior>,
                <&enc_prev_next>,
                <&enc_cycle_tabs>,
                <&enc_no_behavior>,
                <&enc_no_behavior>;

            //  unused
        };

        adj {
            bindings = <
&bootloader  &trans          &trans           &trans  &trans  &trans                    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2      &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_CLR_ALL
&trans       &msc SCRL_UP    &msc SCRL_DOWN   &trans  &trans  &trans                    &trans        &trans        &trans            &trans        &trans        &studio_unlock
&trans       &msc SCRL_LEFT  &msc SCRL_RIGHT  &trans  &trans  &trans                    &out OUT_BLE  &kp C_VOL_DN  &kp K_MUTE        &kp C_VOL_UP  &trans        &trans
&trans       &trans          &trans           &trans  &trans  &trans  &trans    &trans  &out OUT_USB  &kp K_PREV    &kp K_PLAY_PAUSE  &kp K_NEXT    &trans        &trans
                             &trans           &trans  &trans  &trans  &trans    &trans  &trans        &trans        &trans            &trans
            >;

            display-name = "Adjust";
            sensor-bindings =
                <&enc_no_behavior>,
                <&enc_no_behavior>,
                <&enc_vol>,
                <&enc_cycle_tabs>,
                <&enc_no_behavior>,
                <&enc_no_behavior>;

            //  unused
        };

        alt-tab_rotator {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                           &trans  &trans  &trans  &trans  &trans  &from_alt_tab
&trans  &trans  &trans  &trans  &trans  &trans                           &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                           &trans  &trans  &trans  &trans  &trans  &trans
&trans  &none   &trans  &trans  &trans  &trans  &trans    &from_alt_tab  &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans    &trans         &trans  &trans  &trans  &trans
            >;

            sensor-bindings =
                <&enc_vol>,
                <&enc_rotate_tab>,
                <&enc_vol>,
                <&enc_rotate_tab>;
        };
    };
};
